import requests
import threading
from concurrent.futures import ThreadPoolExecutor
import time
import os
from datetime import datetime
from colorama import init, Fore, Style
import sys

# Initialize colorama for cross-platform colored output
init()

class VulnerabilityScanner:
    def __init__(self):
        self.paths = [
            "/_ignition/execute-solution",
            "/_ignition/health-check",
            "/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php",
            "/storage/logs/laravel.log",
            "/storage/logs/laravel.log.bak",
            "/_debugbar/open",
            "/_debugbar/assets/javascript",
            "/_debugbar/assets/stylesheets",
            "/vendor/laravel/framework/src/Illuminate/Routing/Router.php",
            "/config/app.php",
            "/bootstrap/cache/config.php"
        ]
        self.vulnerable_domains = []
        self.lock = threading.Lock()
        self.domains_checked = 0
        self.total_domains = 0

    def print_banner(self):
        banner = """
   ______     _______     ____   ___ ____  _      _____ _ ____   ___  
  / ___\\ \\   / / ____|   |___ \\ / _ \\___ \\/ |    |___ // |___ \\ / _ \\ 
 | |    \\ \\ / /|  _| _____ __) | | | |__) | |_____ |_ \\| | __) | (_) |
 | |___  \\ V / | |__|_____/ __/| |_| / __/| |_____|__) | |/ __/ \\__, |
  \\____|  \\_/  |_____|   |_____|\\___|_____|_|    |____/|_|_____|  /_/ 
                                                                      
        """
        print(Fore.MAGENTA + Style.BRIGHT + banner + Style.RESET_ALL)
        print(Fore.MAGENTA + "╔════════════════════════════════════════════════════════════╗" + Style.RESET_ALL)
        print(Fore.MAGENTA + "║              Laravel Vulnerability Scanner                 ║" + Style.RESET_ALL)
        print(Fore.MAGENTA + "║             Author: AnonByte - God Of Server               ║" + Style.RESET_ALL)
        print(Fore.MAGENTA + "╚════════════════════════════════════════════════════════════╝" + Style.RESET_ALL)
        print("")

    def get_user_input(self):
        while True:
            file_path = input(Fore.MAGENTA + Style.BRIGHT + "[+] Enter path to domain list file: " + Style.RESET_ALL)
            if os.path.exists(file_path):
                break
            print(Fore.RED + "[!] File not found. Please try again." + Style.RESET_ALL)

        while True:
            try:
                thread_count = int(input(Fore.MAGENTA + Style.BRIGHT + "[+] Enter number of threads (1-50): " + Style.RESET_ALL))
                if 1 <= thread_count <= 50:
                    break
                print(Fore.RED + "[!] Please enter a number between 1 and 50." + Style.RESET_ALL)
            except ValueError:
                print(Fore.RED + "[!] Please enter a valid number." + Style.RESET_ALL)

        return file_path, thread_count

    def load_domains(self, filename):
        with open(filename, "r") as f:
            domains = [line.strip() for line in f if line.strip()]
            if not all(d.startswith(('http://', 'https://')) for d in domains):
                domains = ['http://' + d if not d.startswith(('http://', 'https://')) else d for d in domains]
        return domains

    def get_simple_error_message(self, error):
        if 'ConnectTimeout' in str(error):
            return "Timeout"
        elif 'SSLError' in str(error):
            return "SSL Error"
        elif 'ConnectionError' in str(error):
            return "Connection Failed"
        elif 'ReadTimeout' in str(error):
            return "Read Timeout"
        elif 'RemoteDisconnected' in str(error):
            return "Connection Lost"
        else:
            return "Failed"

    def print_progress(self, domain, status, error=None):
        with self.lock:
            timestamp = datetime.now().strftime("%H:%M:%S")
            progress = f"{self.domains_checked}/{self.total_domains}"
            
            if status == "CHECKING":
                print(f"{Fore.MAGENTA}[{timestamp}]{Style.RESET_ALL} {Fore.CYAN}[{status}]{Style.RESET_ALL} {domain} {Fore.MAGENTA}({progress}){Style.RESET_ALL}")
            elif status == "ERROR":
                error_msg = self.get_simple_error_message(error)
                print(f"{Fore.MAGENTA}[{timestamp}]{Style.RESET_ALL} {Fore.RED}[{error_msg}]{Style.RESET_ALL} {domain} {Fore.MAGENTA}({progress}){Style.RESET_ALL}")

    def check_vulnerability(self, domain):
        self.print_progress(domain, "CHECKING")
        
        for path in self.paths:
            url = f"{domain.rstrip('/')}{path}"
            try:
                response = requests.get(url, timeout=10, verify=False)
                if response.status_code == 500:
                    if any(indicator in response.text.lower() for indicator in ['reflectionexception', 'facade', 'laravel', 'ignition']):
                        with self.lock:
                            print(f"\n{Fore.MAGENTA}{Style.BRIGHT}[!] VULNERABILITY FOUND{Style.RESET_ALL}")
                            print(f"{Fore.GREEN}[+] Domain: {domain}")
                            print(f"[+] Path: {path}{Style.RESET_ALL}\n")
                            self.vulnerable_domains.append(f"{domain} - {path}")
                        return True
            except requests.exceptions.RequestException as e:
                self.print_progress(domain, "ERROR", e)
                continue
        return False

    def process_domain(self, domain):
        try:
            self.check_vulnerability(domain)
        except Exception as e:
            self.print_progress(domain, "ERROR", e)
        finally:
            with self.lock:
                self.domains_checked += 1

    def save_results(self):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"vulnerable_domains_{timestamp}.txt"
        
        with open(filename, "w") as f:
            f.write("Laravel Vulnerability Scan Results\n")
            f.write("=" * 50 + "\n")
            f.write(f"Scan completed at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write("=" * 50 + "\n\n")
            
            if self.vulnerable_domains:
                for domain in self.vulnerable_domains:
                    f.write(f"{domain}\n")
            else:
                f.write("No vulnerable domains found.\n")

        print(f"\n{Fore.MAGENTA}[*] Results saved to: {filename}{Style.RESET_ALL}")

    def run(self):
        self.print_banner()
        file_path, thread_count = self.get_user_input()

        print(f"\n{Fore.MAGENTA}[*] Loading domains...{Style.RESET_ALL}")
        domains = self.load_domains(file_path)
        self.total_domains = len(domains)

        print(f"{Fore.MAGENTA}[*] Loaded {self.total_domains} domains{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}[*] Starting scan with {thread_count} threads...{Style.RESET_ALL}")
        print(f"\n{Fore.MAGENTA}{'=' * 60}{Style.RESET_ALL}\n")

        with ThreadPoolExecutor(max_workers=thread_count) as executor:
            executor.map(self.process_domain, domains)
        
        print(f"\n{Fore.MAGENTA}{'=' * 60}{Style.RESET_ALL}")
        print(f"\n{Fore.MAGENTA}[*] Scan completed!{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}[*] Total domains scanned: {self.total_domains}{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}[*] Vulnerable domains found: {len(self.vulnerable_domains)}{Style.RESET_ALL}")
        
        self.save_results()

if __name__ == "__main__":
    requests.packages.urllib3.disable_warnings()
    
    try:
        scanner = VulnerabilityScanner()
        scanner.run()
    except KeyboardInterrupt:
        print(Fore.RED + "\n[!] Scan interrupted by user" + Style.RESET_ALL)
        sys.exit(1)
    except Exception as e:
        print(Fore.RED + f"\n[!] An error occurred: {str(e)}" + Style.RESET_ALL)
        sys.exit(1)
